
# spring.profiles.active=test
spring.profiles.active=dev
# spring.profiles.active=prod
spring.jpa.open-in-view=false

#External APIs
host.solicitante=${ANALISE_FINANCEIRA_URL:http://localhost:9999}
host.cartao=${CARTAO_RESOURCE_URL:http://localhost:8888}

## spring security resource server configuration
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:18080/auth/realms/nosso-cartao}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://localhost:18080/auth/realms/nosso-cartao/protocol/openid-connect/certs}

# feign
feign.client.config.consultaRestricao.read-timeout=200
feign.client.config.consultaRestricao.connect-timeout=200

# actuator
management.endpoint.health.show-details=always
management.endpoints.web.exposure.include=health,info,prometheus,metric
management.endpoints.prometheus.enabled=true
management.metrics.tags.aplicacao=${NOME_DA_APLICACAO:servico de proposta}
management.metrics.tags.ambiente=${AMBIENTE:desenvolvimento}

# Jaeger - Habilita ou não
opentracing.jaeger.enabled=${JAEGER_ENABLED:true}

# Jaeger - Nome do serviço
opentracing.jaeger.service-name=${spring.application.name: proposta}

# Jaeger - Endereço para enviar os metadados (trace, span, etc)
opentracing.jaeger.http-sender.url=${JAEGER_ENDPOINT:http://localhost:14268/api/traces}

# Jaeger - Tipo de amostragem (probabilístico) e sua configuração (1 = 100%)
opentracing.jaeger.probabilistic-sampler.sampling-rate=${JAEGER_SAMPLER:1}

# True para ativar amostragem constante
opentracing.jaeger.const-sampler.decision=${JAEGER_SAMPLER:false}
